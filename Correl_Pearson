library(terra)
library(sf)
library(dplyr)

# Definir o caminho base
base_path <- "C:/Users/tunho/Desktop/GAB/Mod"

# Definir extensão da América
ext_america <- ext(-170, -26, -56, 72)

# Lista específica de arquivos
raster_files <- c(
  bioclimaticvar = "C:/Users/tunho/Desktop/GAB/Mod/precipitacao_media_anual.tif",
  maxtemperature = "C:/Users/tunho/Desktop/GAB/Mod/media_anual_tmax_C.tif", 
  meantemperature = "C:/Users/tunho/Desktop/GAB/Mod/media_anual_tavg_C.tif",
  mintemperature = "C:/Users/tunho/Desktop/GAB/Mod/media_anual_tmin_C.tif",
  meanvaporpressure = "C:/Users/tunho/Desktop/GAB/Mod/meanvaporpressure.tif",
  wind = "C:/Users/tunho/Desktop/GAB/Mod/wind_media_anual.tif",
  relevo = "C:/Users/tunho/Desktop/GAB/Mod/output_GMRT.tif",
  NDVI = "C:/Users/tunho/Desktop/GAB/Mod/NDVI/NDVI_america.tif"
)

# Verificar quais arquivos existem
existing_files <- raster_files[file.exists(raster_files)]
print("Arquivos encontrados:")
print(existing_files)

if(length(existing_files) == 0) {
  stop("Nenhum arquivo encontrado. Verifique os caminhos.")
}

# Função para carregar e preparar cada raster
preparar_raster <- function(caminho, nome, extensao, referencia) {
  print(paste("Processando:", nome))
  
  # Carregar raster
  r <- rast(caminho)
  
  # Recortar para a extensão da América
  r_recortado <- crop(r, extensao)
  
  # Se for o primeiro raster, usar como referência
  if(is.null(referencia)) {
    return(r_recortado)
  }
  
  # Redimensionar para corresponder ao raster de referência
  r_resample <- resample(r_recortado, referencia, method = 'bilinear')
  
  return(r_resample)
}

# Carregar e processar os rasters
raster_list <- list()
referencia <- NULL

for(i in 1:length(existing_files)) {
  nome <- names(existing_files)[i]
  caminho <- existing_files[i]
  
  raster_proc <- preparar_raster(caminho, nome, ext_america, referencia)
  
  # Usar o primeiro raster como referência para os demais
  if(i == 1) {
    referencia <- raster_proc
  }
  
  raster_list[[nome]] <- raster_proc
}

# Combinar todos os rasters em um stack
env_stack <- rast(raster_list)
names(env_stack) <- names(existing_files)

print("Stack final preparado:")
print(env_stack)

# Carregar pontos de ocorrência
points_file <- file.path(base_path, "Tabela Ocorrência V. spectrum_DADOS BRUTOS EM PREPARAÇÃO - Modelagem_Dec.csv")

if(!file.exists(points_file)) {
  csv_files <- list.files(base_path, pattern = "\\.csv$", full.names = TRUE)
  if(length(csv_files) > 0) {
    points_file <- csv_files[1]
    print(paste("Usando arquivo CSV encontrado:", basename(points_file)))
  } else {
    stop("Arquivo CSV de pontos não encontrado.")
  }
}

points_df <- read.csv(points_file)

# Verificar se as colunas de coordenadas existem
coord_columns <- c("longitude", "latitude")
if(all(coord_columns %in% names(points_df))) {
  print("Colunas de coordenadas encontradas: longitude e latitude")
} else {
  possible_coords <- c("lon", "lat", "x", "y", "decimalLongitude", "decimalLatitude")
  found_coords <- possible_coords[possible_coords %in% names(points_df)]
  
  if(length(found_coords) >= 2) {
    coord_columns <- found_coords[1:2]
    print(paste("Usando colunas alternativas:", paste(coord_columns, collapse = " e ")))
  } else {
    stop("Colunas de coordenadas não encontradas. Verifique o arquivo CSV.")
  }
}

# Converter para objeto espacial (SpatVector)
points_vect <- vect(points_df, geom = coord_columns, crs = "EPSG:4326")

# Extrair valores dos rasters nos pontos
points_env <- extract(env_stack, points_vect)

# Juntar com coordenadas e dados originais
result <- points_df
result[, names(env_stack)] <- points_env[, -1]  # Adiciona as variáveis com os nomes corretos

# Salvar o resultado
output_file <- file.path(base_path, "pointsample10.csv")
write.csv(result, output_file, row.names = FALSE)

print(paste("Tabela salva com sucesso em:", output_file))

### ETAPA 2 - ANÁLISE DE CORRELAÇÃO E SALVAR CSV DA MATRIZ

pointsample <- read.csv("C:/Users/tunho/Desktop/GAB/Mod/pointsample10.csv")

# Selecionar as 8 variáveis específicas
variaveis_desejadas <- c("bioclimaticvar", "maxtemperature", "meantemperature", 
                         "mintemperature", "meanvaporpressure", "wind", "relevo", "NDVI")

variaveis_presentes <- variaveis_desejadas[variaveis_desejadas %in% names(pointsample)]

print("Variáveis para análise de correlação:")
print(variaveis_presentes)

if(length(variaveis_presentes) > 1) {
  pointsample_selecionado <- pointsample[, variaveis_presentes]
  cor_matrix <- cor(pointsample_selecionado, method = 'pearson', use = 'complete.obs')
  
  print("Matriz de correlação:")
  print(round(cor_matrix, 3))
  
  # SALVAR A MATRIZ DE CORRELAÇÃO COMO CSV
  matriz_cor_file <- file.path(base_path, "matriz_correlacao.csv")
  write.csv(cor_matrix, matriz_cor_file, row.names = TRUE)
  print(paste("Matriz de correlação salva em:", matriz_cor_file))
  
  # Encontrar correlações > 0.7
  high_corr <- which(cor_matrix > 0.7 & lower.tri(cor_matrix), arr.ind = TRUE)
  
  if(nrow(high_corr) > 0) {
    print("Variáveis com correlação > 0.7:")
    for(i in 1:nrow(high_corr)) {
      var1 <- rownames(cor_matrix)[high_corr[i,1]]
      var2 <- colnames(cor_matrix)[high_corr[i,2]]
      cor_value <- cor_matrix[high_corr[i,1], high_corr[i,2]]
      print(paste("  ", var1, "-", var2, ":", round(cor_value, 3)))
    }
    
    # Salvar também a lista de variáveis correlacionadas
    correlated_pairs <- data.frame(
      Variavel1 = rownames(cor_matrix)[high_corr[,1]],
      Variavel2 = colnames(cor_matrix)[high_corr[,2]],
      Correlacao = cor_matrix[high_corr]
    )
    
    correlated_file <- file.path(base_path, "pares_correlacionados.csv")
    write.csv(correlated_pairs, correlated_file, row.names = FALSE)
    print(paste("Pares correlacionados salvos em:", correlated_file))
    
  } else {
    print("Nenhum par de variáveis com correlação > 0.7 encontrado.")
  }
} else {
  print("Número insuficiente de variáveis para análise de correlação.")
}

print("Processamento concluído com sucesso!")
